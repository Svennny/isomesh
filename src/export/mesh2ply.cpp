/* This file is part of Isomesh library, released under MIT license.
   Copyright (c) 2019 Nikita Sirgienko (warquark@gmail.com) */
#include <isomesh/export/mesh2ply.hpp>
#include <isomesh/data/mesh.hpp>

#include <fstream>

#include "../3dparty/tinyply.h"

using namespace std;

namespace isomesh {
	void mesh2ply(const Mesh* mesh, std::string filename)
	{
		ofstream fout(filename, std::ios::binary);
		if (!fout.is_open())
			throw std::runtime_error("faild create file" + filename);

		tinyply::PlyFile file;

		size_t vcount = mesh->vertexCount();
		std::vector<float> fdata_container (vcount * 3);
		float *fdata = fdata_container.data ();
		//float fdata[vcount*3]; // Because MSVC is shit that can't do VLA
		const Mesh::Vertex* vertexptr = reinterpret_cast<const Mesh::Vertex*>(mesh->vertexData());
		for (size_t i = 0; i < vcount; i++) {
			fdata[3*i] = vertexptr->position.x;
			fdata[3*i+1] = vertexptr->position.y;
			fdata[3*i+2] = vertexptr->position.z;
			vertexptr++;
		}

		file.add_properties_to_element("vertex", { "x", "y", "z" }, tinyply::Type::FLOAT32, vcount, reinterpret_cast<uint8_t*>(fdata), tinyply::Type::INVALID, 0);

		size_t icount = mesh->indexCount() / 3;
		const uint32_t* indexptr = reinterpret_cast<const uint32_t*>(mesh->indexData());

		file.add_properties_to_element("face", { "vertex_indices" }, tinyply::Type::UINT32, icount, const_cast<uint8_t*>(reinterpret_cast<const uint8_t*>(indexptr)), tinyply::Type::UINT32, 3);

		file.get_comments().push_back("generated by isomesh library, using tinyply library");

		file.write(fout, false);
	}
}
